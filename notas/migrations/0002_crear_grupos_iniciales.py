# Generated by Django 5.0.6 on 2024-05-28 16:00
# Este archivo crea los grupos de usuarios iniciales y les asigna permisos.

from django.db import migrations

# --- Nombres de los grupos (Reorganizado por importancia) ---
GRUPOS = {
    "Administradores": {
        # --- Configuración Fundamental ---
        "periodoacademico": ["add", "change", "delete", "view"],
        "areaconocimiento": ["add", "change", "delete", "view"],
        "curso": ["add", "change", "delete", "view"],
        "materia": ["add", "change", "delete", "view"],
        
        # --- Gestión de Comunidad ---
        "docente": ["add", "change", "delete", "view"],
        "estudiante": ["add", "change", "delete", "view"],
        
        # --- Gestión Académica ---
        "asignaciondocente": ["add", "change", "delete", "view"],
        "indicadorlogroperiodo": ["add", "change", "delete", "view"],
        
        # --- Registros y Seguimiento ---
        "calificacion": ["add", "change", "delete", "view"],
        "asistencia": ["add", "change", "delete", "view"],
        "observacion": ["add", "change", "delete", "view"],
        "plandemejoramiento": ["add", "change", "delete", "view"],
    },
    "Docentes": {
        # --- Permisos de Creación/Edición (Trabajo Diario) ---
        "calificacion": ["add", "change", "view"],
        "asistencia": ["add", "change", "view"],
        "observacion": ["add", "change", "view"],
        "indicadorlogroperiodo": ["add", "change", "view"],
        "plandemejoramiento": ["add", "change", "view"],
        "reporteparcial": ["add", "change", "view"],

        # --- Permisos de Solo Lectura (Consulta) ---
        "estudiante": ["view"],
        "curso": ["view"],
        "materia": ["view"],
    },
    "Estudiantes": {
        # Los estudiantes por defecto no tienen permisos a nivel de modelo en el admin.
        # Su acceso se controla a través de las vistas del dashboard.
    }
}

def crear_grupos_y_permisos(apps, schema_editor):
    """
    Esta función se ejecuta cuando se aplica la migración.
    """
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    for group_name, permissions_data in GRUPOS.items():
        # Crea el grupo
        group, created = Group.objects.get_or_create(name=group_name)
        
        # Asigna los permisos
        for model_codename, perms in permissions_data.items():
            for perm_codename in perms:
                # Construye el nombre completo del permiso, ej: 'add_calificacion'
                full_codename = f"{perm_codename}_{model_codename}"
                
                try:
                    permission = Permission.objects.get(codename=full_codename)
                    group.permissions.add(permission)
                except Permission.DoesNotExist:
                    print(f"Advertencia: El permiso '{full_codename}' no fue encontrado y no se pudo asignar al grupo '{group_name}'.")
        
        print(f"Grupo '{group_name}' procesado.")


class Migration(migrations.Migration):

    dependencies = [
        # Asegúrate que el nombre de la migración anterior sea correcto
        ('notas', '0001_initial'), 
    ]

    operations = [
        migrations.RunPython(crear_grupos_y_permisos),
    ]
