# Generated by Django 5.2.1 on 2025-07-08 19:32

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('notas', '0027_alter_fichadocente_direccion_alter_fichadocente_foto_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='calificacion',
            options={'verbose_name': 'Calificación (Promedio)', 'verbose_name_plural': 'Calificaciones (Promedios)'},
        ),
        migrations.RemoveField(
            model_name='calificacion',
            name='es_recuperada',
        ),
        migrations.RemoveField(
            model_name='calificacion',
            name='fecha_registro',
        ),
        migrations.AddField(
            model_name='asignaciondocente',
            name='porcentaje_hacer',
            field=models.PositiveIntegerField(default=30, help_text='Porcentaje de la nota del HACER (ej: 30). Solo aplica si la ponderación no es equitativa.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='asignaciondocente',
            name='porcentaje_saber',
            field=models.PositiveIntegerField(default=40, help_text='Porcentaje de la nota del SABER (ej: 40). Solo aplica si la ponderación no es equitativa.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='asignaciondocente',
            name='porcentaje_ser',
            field=models.PositiveIntegerField(default=30, help_text='Porcentaje de la nota del SER (ej: 30). Solo aplica si la ponderación no es equitativa.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='asignaciondocente',
            name='usar_ponderacion_equitativa',
            field=models.BooleanField(default=True, help_text='Si se marca, las 3 competencias (Ser, Saber, Hacer) valdrán lo mismo. Se ignorarán los porcentajes manuales.', verbose_name='Usar ponderación equitativa'),
        ),
        migrations.AlterField(
            model_name='calificacion',
            name='docente',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='notas.docente'),
        ),
        migrations.AlterField(
            model_name='calificacion',
            name='tipo_nota',
            field=models.CharField(choices=[('SER', 'Promedio Ser'), ('SABER', 'Promedio Saber'), ('HACER', 'Promedio Hacer'), ('PROM_PERIODO', 'Promedio del Periodo')], max_length=12),
        ),
        migrations.AlterField(
            model_name='calificacion',
            name='valor_nota',
            field=models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('5.0'))]),
        ),
        migrations.CreateModel(
            name='NotaDetallada',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descripcion', models.CharField(help_text="Descripción de la nota (ej: 'Examen 1', 'Taller en clase')", max_length=100)),
                ('valor_nota', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('5.0'))])),
                ('calificacion_promedio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notas_detalladas', to='notas.calificacion')),
            ],
            options={
                'verbose_name': 'Nota Detallada',
                'verbose_name_plural': 'Notas Detalladas',
            },
        ),
    ]
